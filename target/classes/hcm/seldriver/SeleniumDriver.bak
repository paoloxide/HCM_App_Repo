package hcm.seldriver;

import java.io.File;
import java.io.FileOutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.regex.Pattern;

import org.openqa.selenium.*;
import org.openqa.selenium.By.ByLinkText;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.interactions.internal.Coordinates;
import org.openqa.selenium.internal.Locatable;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import hcm.common.ExtendedFirefoxDriver;
import hcm.common.ArgumentExecutor;
import hcm.common.ArgumentHandler;
import hcm.common.CustomRunnable;
import hcm.common.InputErrorHandler;
import hcm.common.TaskUtilities;
import hcm.exelon.App;
import hcm.utilities.ExcelReader;
import hcm.utilities.TextUtility;

public class SeleniumDriver {
	
	private static final long ELEMENT_APPEAR = 30L;
	private static final int MAX_TIMEOUT = 60;
	public static final int navRow = 1;
	public static final int defaultLabelRow = 1; //Former 2
	public static final int defaultInputRow = defaultLabelRow+1;
	public static final int defaulColNum = 0;
	
	private WebDriverWait wait = null;
	private TextUtility textReader = null;
	private ExcelReader excelReader = null;
	public  static WebDriver driver;
	private static WebDriver augmentedDriver; 
	private String caseName;
	private String workspace_path;
	private String excel_path;
	
	//Case-dependent variables
	private int afrrkInt = 0;
	
	//Dependency files
	private String excelPath = "exelon-configurations.xlsx";
	private String configPath = "lib/config_file.txt";
	private String screenShotPath = "target/screenshots/";

	
		
	public void initializeDriver(String hubURL, String browser, String workspace, String excel) {
		try {
			workspace_path = workspace + "/";
			excel_path = excel + "/";
			driver = new RemoteWebDriver(new URL(hubURL), getCapability(browser));
			//driver = new ExtendedFirefoxDriver(createCapabilities(browser));
			//driver.manage().window().maximize();
			System.out.println("Browser size: "+driver.manage().window().getSize());
			augmentedDriver = new Augmenter().augment(driver); 
			
			//Read text file
			textReader = new TextUtility();
			textReader.read(workspace_path + configPath);
			//Read Excel file
			excelReader = new ExcelReader();
			System.out.println(excel_path + excelPath);
			excelReader.loadExcelFile(excel_path + excelPath);
			
			wait = new WebDriverWait(driver, ELEMENT_APPEAR);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	protected DesiredCapabilities getCapability(String browser) {
		try {
			if (browser.contentEquals("firefox")) return DesiredCapabilities.firefox();
			else return DesiredCapabilities.firefox();
			
		} catch (Exception e) {
			
		}
		return null;
	}

	public String getLoginCredentials(String input) {
		/*excelReader = new ExcelReader();
		excelReader.loadExcelFile(excelPath);*/
		excelReader.setActiveSheet("Configurations");
    	int rowNum = 0;
    	int colNum = 0;
		String data = null;
		
		if(input.contentEquals("URL")){
			rowNum = 0;
			colNum = 1;
		}else if (input.contentEquals("USERID")){
			rowNum = 1;
			colNum = 1;
		}else if (input.contentEquals("PASSWORD")){
			rowNum = 2;
			colNum = 1;
		}
		data = excelReader.getCellData(rowNum, colNum);
		
		return data;
	}
	
	public void login(String siteURL, String username, String password) {
		driver.get(siteURL);
		System.out.println(siteURL);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.id("userid")));
		System.out.println("Loading URL..");
		takeScreenShot(caseName);		
    	driver.findElement(By.id("userid")).clear();
    	System.out.println("Waiting for User Id...");
		driver.findElement(By.id("userid")).sendKeys(username);
		System.out.println("User Id "+username+" entered.");
				
		driver.findElement(By.name("password")).clear();
		System.out.println("Waiting for Password...");
		driver.findElement(By.name("password")).sendKeys(password);
		System.out.println("Password ******* entered.");
		
		driver.findElement(By.xpath("//tbody/tr[4]/td/button")).click(); 
		System.out.println("Logging in...");
	}
	
	public void setupAndMaintenance() {
		
		driver.findElement(By.xpath("//img[@alt='Navigator']")).click();
		System.out.println("Navigating to Setup and Maintenance...");
		wait.until(ExpectedConditions.presenceOfElementLocated(By.linkText("Setup and Maintenance"))).click();
		//driver.findElement(By.linkText("Setup and Maintenance")).click();
	}
	
	public void searchTask(String key) {
		//got to Setup and Maintenance
		//driver.get("https://fs-aufsn4x0cba.oracleoutsourcing.com/setup/faces/TaskListManagerTop?fnd=%3B%3B%3B%3Bfalse%3B256%3B%3B%3B&_adf.no-new-window-redirect=true&_adf.ctrl-state=s6qt8bhoo_5&_afrLoop=1042465641683653&_afrWindowMode=2&_afrWindowId=1zd8d2b3t");
		driver.findElement(By.xpath("//img[@title='Collapse Pane']")).click();
		//All Task Tab	
		driver.findElement(By.xpath("//div/a[text()='All Tasks']")).click();
		
		//Search
		driver.findElement(By.xpath("//span/label[text()=' Name']/../input")).clear();
		driver.findElement(By.xpath("//span/label[text()=' Name']/../input")).sendKeys(key);
		driver.findElement(By.xpath("//button[text()='Search']")).click();
		System.out.println("Searching for task "+key+".");
		//takeScreenShot(caseName);
							
	}
		
	public void goToTask(String key, int time) throws Exception{
		/*wait.until(ExpectedConditions.presenceOfElementLocated(
				By.xpath("//span[text()='" + key + "']/../../..//a/img[@title='Go to Task']"))).click();*/
		TaskUtilities.customWaitForElementVisibility("xpath", "//span[text()='" + key + "']/../../..//a/img[@title='Go to Task']", time);
		TaskUtilities.jsFindThenClick("xpath", "//span[text()='" + key + "']/../../..//a/img[@title='Go to Task']");
		System.out.println("Go to task "+key+".");
		//wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//span[text()='" + key + "']")));
		//driver.findElement(By.xpath("//span[text()='" + key + "']/../../../td/a/img[@title='Go to Task']")).click();
	}
	
	public void navigateToTask(String name) throws Exception{
		System.out.println("Task navigation started...");
		String divPath;
		int intLoc = 1;
		String currentLoc="", searchData="", labelLocator="", labelLocatorPath="";

		getSheetName(name);
		String fullNavPath = excelReader.getCellData(navRow, defaulColNum);
		System.out.println("Nav Path is..."+fullNavPath);
		String[] navStep = fullNavPath.split(" > ");
		
		TaskUtilities.customWaitForElementVisibility("xpath", "//a[text()='"+navStep[intLoc]+"']", MAX_TIMEOUT);
		TaskUtilities.jsFindThenClick("xpath", "//a[text()='"+navStep[intLoc]+"']");
		TaskUtilities.customWaitForElementVisibility("xpath", "//h1[text()='"+navStep[intLoc]+"']", MAX_TIMEOUT);
		//Setting project name...
		if(!name.contentEquals("Manage Implementation Project")){
				excelReader.setActiveSheet("Create Implementation Project");
				String projectName = excelReader.getCellData(defaultInputRow, defaulColNum);
				System.out.println("Project Name is "+projectName);
				
				searchData = projectName;
				labelLocator = "Name";
				labelLocatorPath = TaskUtilities.retryingSearchfromDupInput(labelLocator, "");
				
				action(labelLocator,"textbox","xpath",labelLocatorPath,searchData);
				TaskUtilities.jsFindThenClick("xpath", "//button[text()='Search']");
				Thread.sleep(3500);
				TaskUtilities.customWaitForElementVisibility("xpath", "//a[text()='"+searchData+"']", MAX_TIMEOUT);
				TaskUtilities.jsFindThenClick("xpath", "//a[text()='"+searchData+"']");
			
				TaskUtilities.customWaitForElementVisibility("xpath", "//h1[contains(text(),'"+searchData+"')]", MAX_TIMEOUT);
			}
		
		intLoc += 1;
		while(intLoc < navStep.length){
			currentLoc = navStep[intLoc].replace("HCM", "Human Capital Management");
			System.out.println("We are now at: "+currentLoc);
			divPath = "//div[text()='"+currentLoc+"']";
			
			TaskUtilities.customWaitForElementVisibility("xpath", divPath, MAX_TIMEOUT);
			
			if(TaskUtilities.is_element_visible("xpath", divPath+"//a[@title='Expand']")){
				TaskUtilities.retryingFindClick(By.xpath(divPath+"//a[@title='Expand']"));
				TaskUtilities.customWaitForElementVisibility("xpath", divPath+"//a[@title='Collapse']", MAX_TIMEOUT);
			}
			
			if(TaskUtilities.is_element_visible("xpath", divPath+"/../..//a[@title='Go to Task']")){
				TaskUtilities.jsFindThenClick("xpath", divPath);
				
				//Open for improvement...
				String href = driver.findElement(By.xpath(divPath+"/../..//a[@title='Go to Task']")).getAttribute("href");
				if(href.contentEquals("#")){
					TaskUtilities.jsFindThenClick("xpath", divPath+"/../..//a[@title='Go to Task']");
				} else if(href.contains("http")){
					openAdminLink(href);
				}
			}

			intLoc += 1;
		}
	}
	
	public void openAdminLink(String href) throws Exception{
		
		WebElement body = driver.findElement(By.cssSelector("body"));
		//String newTabAction = Keys.chord(Keys.COMMAND, "t");
		String newTabAction = Keys.chord(Keys.CONTROL, "t");
        body.sendKeys(newTabAction);
         
        String chooseTab = Keys.chord(Keys.COMMAND, "2");//on my pc 3 others should be 2;
		//String switchTab = Keys.chord(Keys.CONTROL, Keys.TAB);
        body.sendKeys(chooseTab);
        
        driver.get(href);
	}
	
	public void search(String data, String locator)  {
		driver.findElement(By.xpath(locator)).click();
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//h2[contains(text(),'Search Results')]/../../../../../../..//tbody/tr/td[text()='"+ data +"']"))).click();
									
	}
	
	public void runServiceRequest(String name) throws Exception {
		//excelReader = new ExcelReader();
		//excelReader.loadExcelFile(excelPath);
		caseName = name;
		//navigateToTask(name);
		getSheetName(name);
		searchTask(name);
		//takeScreenShot(caseName);
		goToTask(name, MAX_TIMEOUT); //Edit
		runPrePrep(name);
				
		int rowNum = defaultInputRow;
		int pivotRow = rowNum;
		System.out.println("First Entry is: "+excelReader.getCellData(rowNum, 0));
		readerloop:
		while (!excelReader.getCellData(rowNum, 0).isEmpty()){
			System.out.println("current row num is "+rowNum);
			
			/*try{
					goToTask(name, 15);
				} catch(TimeoutException te){
					//Skips...
				}*/ 

			runPreSteps(name);
			Vector<String> fields = textReader.getCollection(name, "Fields");
			Map<String, String> savedEntry = new HashMap<String, String>();
			
			int fieldSize = fields.size();
			int colNum = 0;
			int iteration = 0;
			//int checkpoint = 0;
			//String arrayCol = null;
			
			fieldloop:
			while( iteration != fieldSize ) {
				System.out.println("iteration is currently: "+iteration );
				String current = fields.elementAt(iteration);
				String[] step = current.split(" \\| ");
				int sleepTime = 0;
				boolean isFound = false;
				//boolean array = false;
				//Iteration Set...
				//Iteration Set...
				
				if(step[0].contains("setExcelRow:")){
						colNum = 0;
						rowNum = ArgumentExecutor.executeSetExcelRow(current, excelReader, pivotRow);
						iteration += 1;
						continue fieldloop;
					}
				//Table Inputs...
				if(step[3].contains("$afrrkInt")){
						System.out.print("Formerly "+step[3]);
						step[3] = step[3].replace("$afrrkInt", ""+afrrkInt);
						System.out.println(" is now: "+step[3]);
					}
				//Table Inputs sections...
				
				//EXCEL data Reader Section...
				String data = excelReader.getCellData(rowNum, colNum);
				
				if (step[0].toUpperCase().contains("SEARCH")){
							data = excelReader.getCellData(rowNum, colNum - 1);
							search(data,step[3]);
							
						//} else if(data.contains("blank") || data.isEmpty() && !step[1].contentEquals("button")){
						} else if(data.contains("blank") || data.isEmpty() && !step[1].contains("button")){
							colNum ++;
							iteration ++;
							//continue;
							continue fieldloop;
							
						} else {
							
							if(step[3].contains("$String")){
								int trueColNum = colNum;
								colNum = 0;
								System.out.println("element has a String argument: ");
								System.out.print("Looking for appropriate data");
								inputloop:
								while(excelReader.getCellData(defaultLabelRow, colNum).length()>0){
									System.out.print(".");
									if(excelReader.getCellData(defaultLabelRow, colNum).contentEquals(step[0])){
										System.out.print("DONE. Formerly "+step[3]);
										step[3] = step[3].replace("$String", excelReader.getCellData(rowNum, colNum));
										System.out.println(" is now: "+step[3]);
										break inputloop;
									}
									colNum += 1;
								}
								colNum = trueColNum;
							}
							
							if(step.length>4)
								{//Fourth step handler...
									Map<String, String> retrievingMap = ArgumentHandler.executeFourthArgument(current, excelReader, rowNum, colNum);
									sleepTime = Integer.parseInt(retrievingMap.get("sleepTime"));
									data = retrievingMap.get("data");
									isFound = Boolean.parseBoolean(retrievingMap.get("isFound"));
									iteration += Integer.parseInt(retrievingMap.get("iteration"));
									colNum = Integer.parseInt(retrievingMap.get("colNum"));
									if(!retrievingMap.get("savedEntry").isEmpty()){
										String[] entry = retrievingMap.get("savedEntry").split(",");
										savedEntry.put(entry[0], entry[1]);
									}
									if(retrievingMap.get("endingArg").contains("continue")){
										if(retrievingMap.get("endingArg").contains("fieldloop")){
											continue fieldloop;
										}
 									}
								}
							
							try{
									Thread.sleep(sleepTime);
									if(isFound) throw new TimeoutException();
									action(step[0],step[1],step[2],step[3],data);
								} catch(UnhandledAlertException ue){
									driver.findElement(By.cssSelector("body")).sendKeys(Keys.ENTER);
									continue fieldloop;
								} catch(Exception e){
									e.printStackTrace();
										//String errMsg = ""+e;
										String errKey = InputErrorHandler.identifyInputErrors(textReader, name);
										System.out.println("Input has errors on: "+errKey);
										
										if(step.length>4)
											{
												if(step[4].contains("throws")){
														String caseItem = ArgumentExecutor.executeThrower(step[4]);
														boolean isResuming = runUndoCaseSteps(name, caseItem, savedEntry.get(caseItem), rowNum);
														if(!isResuming){
															rowNum += 1;
															pivotRow = rowNum;
															continue readerloop;
														} else{
															colNum += 1;
															iteration += 1;
															continue fieldloop;
														}
													}
											}
										
										sentryloop:
										for(String key: savedEntry.keySet()){
												String newKey = key.toLowerCase().replaceAll("\\*", "");
												System.out.println("newKey is now "+newKey);
											//if((""+e).toLowerCase().contains(newKey)){
											if(errKey.toLowerCase().contentEquals(newKey)){	
												System.out.println("Exception Found.. running case: "+ key);
												boolean isResuming = runUndoCaseSteps(name, key, savedEntry.get(key), rowNum);
												
												if(!isResuming){
													rowNum += 1;
													continue readerloop;
												}
												break sentryloop;
											}
										}
								}
						}
				//Excel Reader Part
				
				if (step[1].contains("button"))colNum --;		
				colNum ++;
				iteration ++;
				System.out.println("Final iteration line has been reached...");
			}
			
			takeScreenShot(caseName);
			try{
					runPostSteps(name, rowNum);
				} catch(Exception e){
					e.printStackTrace();
					System.out.println("ERROR has been found...");
					runUndoSteps(name);
				}
			
			rowNum ++;
			pivotRow = rowNum;
		}
	}
	
	//Get the Excel Sheet Name in the config_file.txt
	private void getSheetName(String name)  {
		Vector<String> properties = textReader.getCollection(name, "Properties");
		Enumeration<String> elements = properties.elements();
		
		while(elements.hasMoreElements()) {
			String current = elements.nextElement();
			if (current.contains("Sheetname")){ 
				String[] sheetname = current.split(" \\| ");
				excelReader.setActiveSheet(sheetname[1]); 
				break;
			}
		}
	}
	
	//Runs Pre-prep steps in the config_file.text
	private void runPrePrep(String name) throws Exception{
		System.out.print("Preparation steps in progress...");
		Vector<String> prePeps = textReader.getCollection(name, "Pre-Prep");
		Enumeration<String> elements = prePeps.elements();
		
		preploop:
		while(elements.hasMoreElements()) {
			String current = elements.nextElement();
			String[] step = current.split(" \\| ");
			if (current.isEmpty()) break;
			
			System.out.println("current pre-pep is: "+current);
			if(current.contains("execute:")){
					String rs = ArgumentExecutor.executeArithmetic(current, afrrkInt);
					afrrkInt = Integer.parseInt(rs);
					System.out.println("Arithmetic has been executed successfully...");
					continue preploop;
				}else if(current.contains("skip:")){
					break preploop;
				}
			//First step checker...
			if(step[0].equalsIgnoreCase("table")){
					step[3] = step[3].substring(0, step[3].indexOf("//tr"))+"/..";
					System.out.println("locator path is now: "+step[3]);
					//wait.until(ExpectedConditions.elementToBeClickable(getLocator(step[2],step[3])));
					TaskUtilities.customWaitForElementVisibility(step[2], step[3], MAX_TIMEOUT);
					TaskUtilities.retryingFindClick(getLocator(step[2], step[3]));
					afrrkInt = TaskUtilities.surveyCurrentTableInputs(step[3]);
				}
			
			if(!step[0].contentEquals("table")){
				TaskUtilities.customWaitForElementVisibility(step[2], step[3], MAX_TIMEOUT);
				//wait.until(ExpectedConditions.elementToBeClickable(getLocator(step[2],step[3]))).click();
				TaskUtilities.retryingFindClick(getLocator(step[2], step[3]));
			}
		}
		System.out.print("Preparation steps has been done...");
	}
	
	//Runs the Pre-steps set in the config_file.text
	private void runPreSteps(String name) throws Exception {
		Vector<String> preSteps = textReader.getCollection(name, "Pre-Steps");
		Enumeration<String> elements = preSteps.elements();
		
		while(elements.hasMoreElements()) {
			String current = elements.nextElement();
			String[] step = current.split(" \\| ");
			
			if (current.isEmpty()) break;
			if(current.contains("skip:")){
				break;
			}
			
			//Third step checker..
			if(step[3].contains("$afrrkInt")){
					step[3] = step[3].replace("$afrrkInt", ""+afrrkInt);
				}
			
			//Waiting variations...
			if(step[0].equalsIgnoreCase("row")){
					TaskUtilities.customWaitForElementVisibility(step[2], step[3], 15, new CustomRunnable() {
						
						public void customRun() throws Exception {
							// TODO Auto-generated method stub
							TaskUtilities.scrollDownToElement(false, "");
						}
					});
				}
			
			TaskUtilities.customWaitForElementVisibility(step[2], step[3], MAX_TIMEOUT, new CustomRunnable() {
				
				public void customRun() throws Exception {
					// TODO Auto-generated method stub
					TaskUtilities.jsCheckMissedInput();
					TaskUtilities.jsCheckMessageContainer();
				}
			});
			//wait.until(ExpectedConditions.elementToBeClickable(getLocator(step[2],step[3]))).click();
			TaskUtilities.retryingFindClick(getLocator(step[2], step[3]));
			
			//getElement(step[2], step[3]).click();
			//action(step[0],step[1],step[2],step[3],null);
			//driver.findElement(By.linkText(step[3])).click();
			
			System.out.println(step[0]+ " " + step[1] + " " +" is clicked using "+step[2]+" = "+step[3]);
			takeScreenShot(caseName);
			
		}
	}
	
	//Runs the Post-steps set in the config_file.text
	private void runPostSteps(String name, int curRowNum) throws Exception  {
		Vector<String> postSteps = textReader.getCollection(name, "Post-Steps");
		Enumeration<String> elements = postSteps.elements();
		posloop:
		while(elements.hasMoreElements()) {
			String current = elements.nextElement();
			String[] step = current.split(" \\| ");
			int colNum = 0;
			
			if(current.contains("execute:")){
				String rs = ArgumentExecutor.executeArithmetic(current, afrrkInt);
				afrrkInt = Integer.parseInt(rs);
				System.out.println("Arithmetic has been executed successfully...");
				continue posloop;
			}
			
			if(step[3].contains("$String")){
				inputloop:
				while(excelReader.getCellData(defaultLabelRow, colNum).length()>0){
					if(excelReader.getCellData(defaultLabelRow, colNum).contentEquals(step[0])){
						step[3] = step[3].replace("$String", excelReader.getCellData(curRowNum, colNum));
						break inputloop;
					}
					colNum += 1;
				}
			}
			
			if (current.isEmpty()) break;
			TaskUtilities.customWaitForElementVisibility(step[2], step[3], 15, new CustomRunnable() {
				
				public void customRun() throws Exception {
					// TODO Auto-generated method stub
					TaskUtilities.jsCheckMissedInput();
					TaskUtilities.jsCheckMessageContainer();
				}
			});
			TaskUtilities.jsScrollIntoView(step[2], step[3]);
			//try{
					//wait.until(ExpectedConditions.elementToBeClickable(getLocator(step[2],step[3]))).click();
				//} catch(WebDriverException we){
				//	we.printStackTrace();
				//	TaskUtilities.retryingFindClick(By.xpath(step[3]));
				//}
			TaskUtilities.retryingFindClick(getLocator(step[2], step[3]));
			
			//getElement(step[2], step[3]).click();
			
			System.out.println(step[0]+ " " + step[1] + " is clicked using "+step[2]+" = "+step[3]);
			takeScreenShot(caseName);
		}
	}

	//Runs the Undo-steps set in the config_file.text
	private void runUndoSteps(String name) throws Exception{
		boolean isShown = true;
		Vector<String> undoSteps = textReader.getCollection(name, "Undo-Steps");
		Enumeration<String> elements = undoSteps.elements();
		
		unsloop:
		while(elements.hasMoreElements()){
			String current = elements.nextElement();
			String[] step = current.split(" \\| ");
			
			if (current.isEmpty() || current.contains("case:")) break;
			//Execute entry...
			if(current.contains("execute:")){
					String rs = ArgumentExecutor.executeArithmetic(current, afrrkInt);
					afrrkInt = Integer.parseInt(rs);
					System.out.println("Arithmetic has been executed successfully...");
					continue unsloop;
				}
			
			TaskUtilities.customWaitForElementVisibility(step[2], step[3], MAX_TIMEOUT);
			//wait.until(ExpectedConditions.elementToBeClickable(getLocator(step[2],step[3]))).click();
			TaskUtilities.retryingFindClick(getLocator(step[2], step[3]));
			while(isShown && step[0].contentEquals("OK")){
				try{
						TaskUtilities.jsFindThenClick(step[2], step[3]);
						driver.findElement(By.xpath(step[3])).click();
						isShown = true;
					} catch(Exception e){
						isShown = false;
					}
			}
			
			System.out.println(step[0]+ " " + step[1] + " is clicked using "+step[2]+" = "+step[3]);
		}
		
		System.out.println("Fallback steps has been executed...");
	}
	
	//Supports Fallback methods for Exception Cases
	private boolean runUndoCaseSteps(String name, String caseItem, String data, int curRowNum) throws Exception{
		int colNum = 0;
		System.out.print("Setting Case elements");
		Vector<String> undoCaseSteps = textReader.getCaseCollection(name, caseItem);
		Enumeration<String> elements = undoCaseSteps.elements();
		System.out.println(" ...DONE.");
		
		uncaseloop:
		while(elements.hasMoreElements()){
			String current = elements.nextElement();
			System.out.println("Starting the loop for: "+current);
			//current = current.replace("\t", "");
			String[] step = current.split(" \\| ");
			
			if (current.isEmpty()) return true;
			//Decision here...
			if(step[0].contentEquals("resume esac")){
				System.out.println("Case steps has been executed...");
				return true;
			}else if(step[0].contentEquals("end esac")){
				System.out.println("Case steps has been executed...");
				return false;
			}
			
			//pseudo perform actions...
			if(step[1].contentEquals("textbox")){
					action(step[0],step[1],step[2],step[3],data);
				}
			
			//Validation actions...
			if(step[3].contains("$String")){
				System.out.println("element has a String argument: ");
				System.out.print("Looking for appropriate data");
				inputloop:
				while(excelReader.getCellData(defaultLabelRow, colNum).length()>0){
					System.out.print(".");
					if(excelReader.getCellData(defaultLabelRow, colNum).contentEquals(step[0])){
						System.out.println("DONE.");
						step[3] = step[3].replace("$String", excelReader.getCellData(curRowNum, colNum));
						System.out.println("New data is now: "+step[3]);
						break inputloop;
					}
					colNum += 1;
				}
				colNum = 0;
			}
			//Execute entry...
			if(current.contains("execute:")){
					String rs = ArgumentExecutor.executeArithmetic(current, afrrkInt);
					afrrkInt = Integer.parseInt(rs);
					System.out.println("Arithmetic has been executed successfully...");
					continue uncaseloop;
				}
			
			try{
					TaskUtilities.retryingFindClick(getLocator(step[2], step[3]));
					//wait.until(ExpectedConditions.elementToBeClickable(getLocator(step[2],step[3]))).click();
				} catch(WebDriverException we){
					Thread.sleep(1000); TaskUtilities.retryingFindClick(getLocator(step[2], step[3]));
				}
			System.out.println(step[0]+ " " + step[1] + " " +" is clicked using "+step[2]+" = "+step[3]);
		}
		
		return true;
	}
	
	//Determine the appropriate actions based on the type of element set in the config_file.txt
	public void action(String name, String type, String locatorType, String locator, String data) throws Exception{
		System.out.println("Performing actions...");
		int TIME_OUT = MAX_TIMEOUT;
		int attempts = 0;
		actionloop:
		while(attempts < 3){
			try{
				
				if(name.contentEquals("Cancel")) TIME_OUT = 10;
				
				System.out.println("Waiting for element to be found...");
				TaskUtilities.customWaitForElementVisibility(locatorType, locator, TIME_OUT, new CustomRunnable() {
					
					public void customRun() throws Exception {
						// TODO Auto-generated method stub
						TaskUtilities.jsCheckMissedInput();
						TaskUtilities.jsCheckMessageContainer();
					}
				});
				TaskUtilities.jsScrollIntoView(locatorType, locator);
				//5/2/2016: ERROR
				//boolean isDisabled = TaskUtilities.jsCheckEnablementStatus(locatorType ,locator);
				//if(!isDisabled) wait.until(ExpectedConditions.elementToBeClickable(getLocator(locatorType,locator)));
				WebElement element = getElement(locatorType, locator);
				
				Coordinates coordinate = ((Locatable)element).getCoordinates(); 
				coordinate.onPage(); 
				coordinate.inViewPort();
				
				if(type.contains("textbox") || type.contains("dropdown")) {
					//wait.until(ExpectedConditions.presenceOfElementLocated(getLocator(locatorType,locator)));
					
					element.click();
					element.clear();
					element.click();
					System.out.println(name+ " " + type + " " +" is clicked using "+locatorType+" = " +locator);
					if(data.toLowerCase().contains("yes,")){
							data = data.substring(data.indexOf(",")+1);
							data = data.trim();
						}
					element.sendKeys(data);	
					System.out.println(name+" = "+data);
					if(type.contains("enter")){
						element.sendKeys(Keys.ENTER);
					}
					//if(type.contentEquals("dropdown"))
						element.sendKeys(Keys.TAB);	
					
				}/*(else if(type.contentEquals("dropdown-follow")){
					WebElement dfelem = getElement(locatorType, locator+"[text()="+data+"]");
					wait.until(ExpectedConditions.elementToBeClickable(getLocator(locatorType, locator+"[text()="+data+"]"))).click();
					
				}*/else if(type.contentEquals("select")) {
					//wait.until(ExpectedConditions.elementToBeClickable(getLocator(locatorType,locator)));
					new Select(element).selectByVisibleText(data);
					System.out.println(name+" = "+data);
					element.sendKeys(Keys.ENTER);
					Thread.sleep(1000);
					
				} else if(type.contains("button")) {
					//wait.until(ExpectedConditions.elementToBeClickable(getLocator(locatorType,locator)));
					if(type.contains("js")){
						TaskUtilities.jsFindThenClick(locatorType, locator);
					}else{
						element.click();
					}
					System.out.println(name+ " " + type + " " +" is clicked using "+locatorType+" = " +locator);
					Thread.sleep(1000);
					
				} else if(type.contentEquals("radio")) {
					element.click();
					
				} else if(type.contentEquals("checkbox")) {
					//wait.until(ExpectedConditions.presenceOfElementLocated(getLocator(locatorType,locator)));
					boolean isChecked = TaskUtilities.jsGetCheckboxTickStatus(locatorType, locator);
					
					//if(element.isSelected()) {
						if((data.toUpperCase().contentEquals("FALSE") || data.toUpperCase().contains("NO")) && isChecked){
							element.click();
							System.out.println(name+ " " + type + " " +" is clicked using "+locatorType+" = " +locator);
							System.out.println(name+" = "+data);
						}
					//} else
						if((data.toUpperCase().contentEquals("TRUE") || data.toUpperCase().contains("YES")) && !isChecked){
							element.click();
							
							System.out.println(name+ " " + type + " " +" is clicked using "+locatorType+" = " +locator);
							System.out.println(name+" = "+data);
						}
				} else if(type.contentEquals("nullable")){
					//Skips for now...
				}
				
				if(type.contains("enter")){
					element.sendKeys(Keys.ENTER);
				}
				
				break actionloop;
			} catch (StaleElementReferenceException e) {
				e.printStackTrace();
				attempts += 1;
			} catch (TimeoutException te){
				if(attempts>0) throw te;
			} catch(UnhandledAlertException ue){
				throw new UnhandledAlertException("Unexpected modal dialog appeared. Reverting steps.");
			} catch (WebDriverException we){
				we.printStackTrace();
				TaskUtilities.jsCheckMissedInput();
				TaskUtilities.jsCheckMessageContainer();
				attempts += 1;
			}
		}
	}
	
	public WebElement getElement(String type, String value) {
		return wait.until(ExpectedConditions.presenceOfElementLocated(getLocator(type,value)));
	}
	
	public By getLocator(String type, String value) {
		if(type.contentEquals("id")) return By.id(value);
		else if(type.contentEquals("xpath")) return By.xpath(value);
		else if(type.contentEquals("tagname")) return By.xpath(value);
		else if(type.contentEquals("classname")) return By.className(value);
		else if(type.contentEquals("cssselector")) return By.cssSelector(value);
		else if(type.contentEquals("name")) return By.name(value);
		else if(type.contentEquals("linktext")) return By.linkText(value);
		else return By.partialLinkText(value);
	} 

	//Screenshot
	public void takeScreenShot(String caseName) {
		
		String datePrefix = new SimpleDateFormat("yyyyMMdd_HHmmssSSS")
				.format(new Date());
		String path = workspace_path + screenShotPath + caseName +"";
		String ssPath = workspace_path + screenShotPath;

		try {
			
			File ssDir = new File(ssPath);
			if(!ssDir.exists())
				ssDir.mkdir();
			
			
			File dir = new File(path);
			if (!dir.exists()) {
				System.out.println("The location "+path+" does not exist.");
				dir.mkdir();
				System.out.println("A directory "+path+" is created.");
			}
			
			byte[] screenshot;
			
			screenshot = ((org.openqa.selenium.TakesScreenshot) augmentedDriver)
					.getScreenshotAs(OutputType.BYTES);

			File screenshotFile = new File(MessageFormat.format("{0}/{1}-{2}",
					path, datePrefix, caseName + ".png"));
			
			/*String screenshotFileSimpleName = datePrefix + "-" + caseName + ".png";
			String screenshotFilePath = screenshotFile.getPath().replace("\\",
					"/");
			String screenshotId = datePrefix.substring(screenshotFile.getName()
					.indexOf("_") + 1);*/
			
			FileOutputStream outputStream = new FileOutputStream(screenshotFile);
			try {
				outputStream.write(screenshot);
				System.out.println("Screen shot "+screenshotFile.toString()+" saved in "+path);
			} finally {
				outputStream.close();
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		}
	} 
	
	public void dispose() {
		driver.close();
		driver.quit();
	}
	
}
